name: Daily Code Scan and Issue Creation

on:
  schedule:
    - cron: '59 23 * * *' # Every day at 11:59 PM UTC
  workflow_dispatch:       # Manual trigger

env:
  TARGET_DIRS: "frontend/src app" # Configurable directories

jobs:
  scan-and-create-issues:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: ESLint
            run: |
              npx eslint frontend/src/**/*.ts* --format json -o eslint-report.json || true
            format: npx prettier --write frontend/src
            report: eslint-report.json
            trend: eslint-trend.md
          - name: Flake8
            run: |
              pip install flake8
              flake8 app --format=default --output-file=flake8-report.txt || true
            format: |
              pip install black
              black app
            report: flake8-report.txt
            trend: flake8-trend.md

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for branch creation and full git context

      - name: Set up Node.js cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        if: matrix.name == 'ESLint'

      - name: Set up pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        if: matrix.name == 'Flake8'

      - name: Get commits made today
        id: get_commits
        run: |
          COMMITS=$(git log --since="midnight" --pretty=format:"%H" -- $TARGET_DIRS)
          echo "COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Lint with ${{ matrix.name }}
        if: env.COMMITS != ''
        run: ${{ matrix.run }}

      - name: Upload ${{ matrix.name }} report as artifact
        if: env.COMMITS != '' && (matrix.name == 'ESLint' || matrix.name == 'Flake8')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-report
          path: ${{ matrix.report }}

      # 1. Automated Code Formatting and Auto-Fix PRs
      - name: Run ${{ matrix.name }} formatter
        if: env.COMMITS != ''
        run: ${{ matrix.format }}

      - name: Create auto-fix PR if code was reformatted
        if: env.COMMITS != ''
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(${{ matrix.name }}): auto-format code via GitHub Actions"
          branch: "auto/format-${{ matrix.name }}-${{ github.run_id }}"
          create_pull_request: true
          push_options: '--force'
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          skip_dirty_check: false

      # 2. Historical Trend Reporting as Artifacts and Commit to Separate Branch/Dir/Date
      - name: Generate dated lint trend report
        if: env.COMMITS != ''
        run: |
          today=$(date +'%d-%m-%Y')
          if [ "${{ matrix.name }}" = "ESLint" ]; then
            dir="TS-trend"
            mkdir -p "$dir"
            trend_file="$dir/$today.md"
            echo "| Date | Error Count |" > "$trend_file"
            echo "|------|-------------|" >> "$trend_file"
            if [ -f eslint-report.json ]; then
              ERRORS=$(jq '[.[] | .messages | length] | add' eslint-report.json)
              echo "| $today | $ERRORS |" >> "$trend_file"
            fi
          elif [ "${{ matrix.name }}" = "Flake8" ]; then
            dir="python-trend"
            mkdir -p "$dir"
            trend_file="$dir/$today.md"
            echo "| Date | Error Count |" > "$trend_file"
            echo "|------|-------------|" >> "$trend_file"
            if [ -f flake8-report.txt ]; then
              ERRORS=$(cat flake8-report.txt | wc -l)
              echo "| $today | $ERRORS |" >> "$trend_file"
            fi
          fi
          echo "trend_file=$trend_file" >> $GITHUB_ENV

      - name: Upload ${{ matrix.name }} trend report as artifact
        if: env.COMMITS != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-trend-${{ env.trend_file }}
          path: ${{ env.trend_file }}

      - name: Commit trend report to trend-reports branch in correct dir with date
        if: env.COMMITS != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Check if branch exists on remote, if not, create it from main
          if ! git ls-remote --exit-code --heads origin trend-reports ; then
            git checkout -b trend-reports
            git push origin trend-reports
          else
            git fetch origin trend-reports:trend-reports
            git checkout trend-reports
          fi
          # Copy the new trend file into the branch (preserves dir structure)
          cp "${{ env.trend_file }}" .
          git add "${{ env.trend_file }}"
          git commit -m "chore(trend-report): add ${{ matrix.name }} lint error trend for ${{ env.trend_file }} [automated]" || echo "No changes to commit"
          git push origin trend-reports

      # Issue deduplication: Check for open issues with similar title
      - name: Create issues for ${{ matrix.name }} findings
        if: env.COMMITS != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { repo, owner } = context.repo;
            const commitSha = process.env.GITHUB_SHA;
            const today = new Date().toISOString().split('T')[0];

            async function issueExists(title) {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'open',
                labels: 'bug,automated-scan'
              });
              return issues.some(issue => issue.title === title);
            }

            if ('${{ matrix.name }}' === 'ESLint' && fs.existsSync('eslint-report.json')) {
              const report = JSON.parse(fs.readFileSync('eslint-report.json'));
              for (const file of report) {
                for (const message of file.messages) {
                  const title = `ESLint: ${message.ruleId} in ${file.filePath} [${today}]`;
                  if (!(await issueExists(title))) {
                    await github.rest.issues.create({
                      owner,
                      repo,
                      title,
                      body: `**Rule:** ${message.ruleId}\n**File:** ${file.filePath}\n**Line:** ${message.line}\n**Message:** ${message.message}\n**Commit:** ${commitSha}\n**Date:** ${today}`,
                      labels: ['bug', 'automated-scan']
                    });
                  }
                }
              }
            }

            if ('${{ matrix.name }}' === 'Flake8' && fs.existsSync('flake8-report.txt')) {
              const lines = fs.readFileSync('flake8-report.txt', 'utf-8').split('\n').filter(Boolean);
              for (const line of lines) {
                const title = `Flake8: Issue found [${today}]`;
                if (!(await issueExists(title))) {
                  await github.rest.issues.create({
                    owner,
                    repo,
                    title,
                    body: `**Detail:** ${line}\n**Commit:** ${commitSha}\n**Date:** ${today}`,
                    labels: ['bug', 'automated-scan']
                  });
                }
              }
            }

      # Reminder to check CodeQL externally (as per your setup)
      - name: Reference:CodeQL Security Scan
        run: |
          echo "CodeQL is set up as a separate workflow. Please review security alerts in the Security tab for the latest findings."
